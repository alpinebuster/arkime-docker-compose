# NOTE: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]; for more information see [https://www.elastic.co/guide/en/elasticsearch/reference/8.17/bootstrap-checks-max-map-count.html]
# Temp -> `sudo sysctl -w vm.max_map_count=262144` -> `sudo reboot`
# Permanently -> `vi /etc/sysctl.conf` -> add `vm.max_map_count=262144` -> `sudo sysctl -p`
# 
# `sudo chown -R 1000:1000 ./db/main ./db/node-1`
# `source .env`
# 
# `docker compose build --progress=plain --no-cache=true`
# `docker compose up -d`
# `docker compose down`
# 
services:
  arkime_es_os-main:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_STACK_VERSION}
    container_name: arkime_es_os-main
    restart: unless-stopped
    ports:
      - 19200:9200
    env_file: ["./.env"]
    environment:
      - node.name=${ES_OS_MAIN_NODE}
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=${ES_OS_MAIN_NODE},arkime_es_os-1
      - discovery.seed_hosts=arkime_es_os-1
      - ELASTIC_USERNAME=${ES_OS_USERNAME}
      - ELASTIC_PASSWORD=${ES_OS_PASSWORD}
      # TODO
      - xpack.security.enabled=false
      # - bootstrap.memory_lock=true
      # - xpack.ml.use_auto_machine_memory_percent=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    # mem_limit: ${MEM_LIMIT}
    # ulimits:
    #   memlock:
    #     soft: -1
    #     hard: -1
    networks:
      - arkime_es_os
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - ./db/main:/usr/share/elasticsearch/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail -u ${ES_OS_USERNAME}:${ES_OS_PASSWORD} localhost:${ES_OS_PORT}/_cluster/health || exit 1"]
      interval: 10s
      timeout: 30s
      retries: 12

  arkime_es_os-1:
    depends_on:
      - arkime_es_os-main
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_STACK_VERSION}
    container_name: arkime_es_os-1
    restart: unless-stopped
    env_file: ["./.env"]
    environment:
      - node.name=arkime_es_os-1
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=${ES_OS_MAIN_NODE},arkime_es_os-1
      - discovery.seed_hosts=${ES_OS_MAIN_NODE}
      - ELASTIC_USERNAME=${ES_OS_USERNAME}
      - ELASTIC_PASSWORD=${ES_OS_PASSWORD}
      # TODO
      - xpack.security.enabled=false
      # - bootstrap.memory_lock=true
      # - xpack.ml.use_auto_machine_memory_percent=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    # mem_limit: ${MEM_LIMIT}
    # ulimits:
    #   memlock:
    #     soft: -1
    #     hard: -1
    networks:
      - arkime_es_os
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - ./db/node-1:/usr/share/elasticsearch/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: [
        "CMD-SHELL",
        "curl --silent --fail -u ${ES_OS_USERNAME}:${ES_OS_PASSWORD} localhost:${ES_OS_PORT}/_cluster/health || exit 1",
      ]
      interval: 10s
      timeout: 30s
      retries: 12

  arkime_kibana:
    image: docker.elastic.co/kibana/kibana:${ES_STACK_VERSION}
    container_name: arkime_kibana
    restart: unless-stopped
    env_file: ["./.env"]
    environment:
      - SERVERNAME=${KIBANA_USERNAME}
      - ELASTICSEARCH_HOSTS=http://${ES_OS_HOST}:${ES_OS_PORT}
      - ELASTIC_USERNAME=${ES_OS_USERNAME}
      - ELASTIC_PASSWORD=${ES_OS_PASSWORD}
      - ELASTICSEARCH_USERNAME=${KIBANA_USERNAME}
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    mem_limit: ${MEM_LIMIT}
    ports:
      - 15601:5601
    depends_on:
      arkime_es_os-main:
        condition: service_healthy
    networks:
      - arkime_es_os
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  arkime-setup:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - DOCKER_UBUNTU_VERSION=22.04
    pull_policy: never
    image: zzz/arkime:latest
    container_name: arkime-setup
    restart: on-failure:12
    env_file: ["./.env"]
    environment:
      - ARKIME_VERSION=${ARKIME_VERSION}
      # NOTE: Set to true on first execution, then false subsequently
      - INITIALIZE_DB=true
      - WIPE_DB=false
      - ES_OS_HOST=${ES_OS_HOST}
      - ES_OS_PORT=${ES_OS_PORT}
      - ES_OS_USERNAME=${ES_OS_USERNAME}
      - ES_OS_PASSWORD=${ES_OS_PASSWORD}
      - ARKIME_USERNAME=${ARKIME_USERNAME}
      - ARKIME_PASSWORD=${ARKIME_PASSWORD}
      - ARKIME_DIR=${ARKIME_DIR}
      - ARKIME__elasticsearch=http://${ES_OS_USERNAME}:${ES_OS_PASSWORD}@${ES_OS_HOST}:${ES_OS_PORT}
      - ARKIME__prefix=zzz
      - CAPTURE=off
      - VIEWER=off
      - PARLIAMENT=off
      - CONT3XT=off
      - WISE=off
    depends_on:
      arkime_es_os-main:
        condition: service_healthy
    networks:
      - arkime_es_os
    volumes:
      - ./etc:/opt/arkime/etc
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  arkime-viewer:
    pull_policy: never
    image: zzz/arkime:latest
    container_name: arkime-viewer
    cap_add:
      - NET_ADMIN
    restart: on-failure
    env_file: ["./.env"]
    environment:
      - ARKIME_VERSION=${ARKIME_VERSION}
      - INITIALIZE_DB=false
      - WIPE_DB=false
      - ES_OS_HOST=${ES_OS_HOST}
      - ES_OS_PORT=${ES_OS_PORT}
      - ES_OS_USERNAME=${ES_OS_USERNAME}
      - ES_OS_PASSWORD=${ES_OS_PASSWORD}
      - ARKIME_USERNAME=${ARKIME_USERNAME}
      - ARKIME_PASSWORD=${ARKIME_PASSWORD}
      - ARKIME_DIR=${ARKIME_DIR}
      - ARKIME__elasticsearch=http://${ES_OS_USERNAME}:${ES_OS_PASSWORD}@${ES_OS_HOST}:${ES_OS_PORT}
      - ARKIME__interface=${ARKIME__interface}
      - CAPTURE=off
      - VIEWER=on
      - PARLIAMENT=off
      - CONT3XT=off
      - WISE=off
    depends_on:
      arkime_es_os-main:
        condition: service_healthy
      arkime-setup:
        condition: service_completed_successfully
    ports:
      - 8005:8005
    networks:
      - arkime_es_os
    volumes:
      - ./etc:/opt/arkime/etc
      - ./logs/arkime:/etc/logrotate.d/arkime
      - ./logs:/opt/arkime/logs
      - ./raw:/opt/arkime/raw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  arkime-capture:
    pull_policy: never
    image: zzz/arkime:latest
    container_name: arkime-capture
    network_mode: "host"
    cap_add:
      - NET_ADMIN
    restart: on-failure
    env_file: ["./.env"]
    environment:
      - ARKIME_VERSION=${ARKIME_VERSION}
      - INITIALIZE_DB=false
      - WIPE_DB=false
      - ES_OS_HOST=${ES_OS_HOST}
      - ES_OS_PORT=${ES_OS_PORT}
      - ES_OS_USERNAME=${ES_OS_USERNAME}
      - ES_OS_PASSWORD=${ES_OS_PASSWORD}
      - ARKIME_USERNAME=${ARKIME_USERNAME}
      - ARKIME_PASSWORD=${ARKIME_PASSWORD}
      - ARKIME_DIR=${ARKIME_DIR}
      - ARKIME__elasticsearch=http://${ES_OS_USERNAME}:${ES_OS_PASSWORD}@${ES_OS_HOST}:${ES_OS_PORT}
      - ARKIME__interface=${ARKIME__interface}
      - CAPTURE=on
      - VIEWER=off
      - PARLIAMENT=off
      - CONT3XT=off
      - WISE=off
    depends_on:
      arkime_es_os-main:
        condition: service_healthy
      arkime-viewer:
        condition: service_started
      arkime-setup:
        condition: service_completed_successfully
    # extra_hosts:
    #   - "host.docker.internal:host-gateway"
    volumes:
      - ./etc:/opt/arkime/etc
      - ./logs/arkime:/etc/logrotate.d/arkime
      - ./logs:/opt/arkime/logs
      - ./raw:/opt/arkime/raw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  arkime-parliament:
    pull_policy: never
    image: zzz/arkime:latest
    container_name: arkime-parliament
    cap_add:
      - NET_ADMIN
    restart: on-failure
    env_file: ["./.env"]
    environment:
      - ARKIME_VERSION=${ARKIME_VERSION}
      - INITIALIZE_DB=false
      - WIPE_DB=false
      - ES_OS_HOST=${ES_OS_HOST}
      - ES_OS_PORT=${ES_OS_PORT}
      - ES_OS_USERNAME=${ES_OS_USERNAME}
      - ES_OS_PASSWORD=${ES_OS_PASSWORD}
      - ARKIME_USERNAME=${ARKIME_USERNAME}
      - ARKIME_PASSWORD=${ARKIME_PASSWORD}
      - ARKIME_DIR=${ARKIME_DIR}
      - ARKIME__elasticsearch=http://${ES_OS_USERNAME}:${ES_OS_PASSWORD}@${ES_OS_HOST}:${ES_OS_PORT}
      - ARKIME__interface=${ARKIME__interface}
      - CAPTURE=off
      - VIEWER=off
      - PARLIAMENT=on
      - CONT3XT=off
      - WISE=off
    depends_on:
      arkime_es_os-main:
        condition: service_healthy
      arkime-viewer:
        condition: service_started
      arkime-setup:
        condition: service_completed_successfully
    ports:
      - 8008:8008
    networks:
      - arkime_es_os
    volumes:
      - ./etc:/opt/arkime/etc
      - ./logs/arkime:/etc/logrotate.d/arkime
      - ./logs:/opt/arkime/logs
      - ./raw:/opt/arkime/raw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  arkime-wise:
    pull_policy: never
    image: zzz/arkime:latest
    container_name: arkime-wise
    cap_add:
      - NET_ADMIN
    restart: on-failure
    env_file: ["./.env"]
    environment:
      - ARKIME_VERSION=${ARKIME_VERSION}
      - INITIALIZE_DB=false
      - WIPE_DB=false
      - ES_OS_HOST=${ES_OS_HOST}
      - ES_OS_PORT=${ES_OS_PORT}
      - ES_OS_USERNAME=${ES_OS_USERNAME}
      - ES_OS_PASSWORD=${ES_OS_PASSWORD}
      - ARKIME_USERNAME=${ARKIME_USERNAME}
      - ARKIME_PASSWORD=${ARKIME_PASSWORD}
      - ARKIME_DIR=${ARKIME_DIR}
      - ARKIME__elasticsearch=http://${ES_OS_USERNAME}:${ES_OS_PASSWORD}@${ES_OS_HOST}:${ES_OS_PORT}
      - ARKIME__interface=${ARKIME__interface}
      - CAPTURE=off
      - VIEWER=off
      - PARLIAMENT=off
      - CONT3XT=off
      - WISE=on
    depends_on:
      arkime_es_os-main:
        condition: service_healthy
      arkime-viewer:
        condition: service_started
      arkime-setup:
        condition: service_completed_successfully
    ports:
      - 8081:8081
    networks:
      - arkime_es_os
    volumes:
      - ./etc:/opt/arkime/etc
      - ./logs/arkime:/etc/logrotate.d/arkime
      - ./logs:/opt/arkime/logs
      - ./raw:/opt/arkime/raw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  arkime-cont3xt:
    pull_policy: never
    image: zzz/arkime:latest
    container_name: arkime-cont3xt
    cap_add:
      - NET_ADMIN
    restart: on-failure
    env_file: ["./.env"]
    environment:
      - ARKIME_VERSION=${ARKIME_VERSION}
      - INITIALIZE_DB=false
      - WIPE_DB=false
      - ES_OS_HOST=${ES_OS_HOST}
      - ES_OS_PORT=${ES_OS_PORT}
      - ES_OS_USERNAME=${ES_OS_USERNAME}
      - ES_OS_PASSWORD=${ES_OS_PASSWORD}
      - ARKIME_USERNAME=${ARKIME_USERNAME}
      - ARKIME_PASSWORD=${ARKIME_PASSWORD}
      - ARKIME_DIR=${ARKIME_DIR}
      - ARKIME__elasticsearch=http://${ES_OS_USERNAME}:${ES_OS_PASSWORD}@${ES_OS_HOST}:${ES_OS_PORT}
      - ARKIME__interface=${ARKIME__interface}
      - CAPTURE=off
      - VIEWER=off
      - PARLIAMENT=off
      - CONT3XT=on
      - WISE=off
    depends_on:
      arkime_es_os-main:
        condition: service_healthy
      arkime-viewer:
        condition: service_started
      arkime-setup:
        condition: service_completed_successfully
    ports:
      - 3218:3218
    networks:
      - arkime_es_os
    volumes:
      - ./etc:/opt/arkime/etc
      - ./logs/arkime:/etc/logrotate.d/arkime
      - ./logs:/opt/arkime/logs
      - ./raw:/opt/arkime/raw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  # arkime-docs:
  #   build:
  #     context: ./docs
  #     dockerfile: ../docker/docs.Dockerfile
  #   pull_policy: never
  #   image: zzz/arkime-docs:latest
  #   container_name: arkime-docs
  #   restart: on-failure:12
  #   ports:
  #     - 4000:80
  #   volumes:
  #     - ./docker/nginx/arkime.conf:/etc/nginx/conf.d/default.conf
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro

volumes:
  certs:
    driver: local

networks:
  arkime_es_os:
    driver: bridge
    name: arkime_es_os
