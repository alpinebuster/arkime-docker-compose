#
# REF: `https://docs.opensearch.org/latest/install-and-configure/install-opensearch/docker/`
# NOTE: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]; for more information see [https://www.elastic.co/guide/en/elasticsearch/reference/8.17/bootstrap-checks-max-map-count.html]
# Temp -> `sudo sysctl -w vm.max_map_count=262144` -> `sudo reboot`
# Permanently -> `sudo vi /etc/sysctl.conf` -> add `vm.max_map_count=262144`, `net.core.rmem_max=134217728`, `net.core.wmem_max=134217728` -> `sudo sysctl -p`
# 
# `sudo chown -R 1000:1000 ./db`
# `source .env`
# 
# `docker compose --progress=plain --no-cache=true -f docker-compose.os.yml build`, `docker compose --progress=plain --no-cache=true -f docker-compose.os.yml --profile optional build arkime-docs`
# `docker compose -f docker-compose.os.yml up -d`
# `docker compose -f docker-compose.os.yml down`
# `docker compose -f docker-compose.os.yml restart arkime-capture`
# 
services:
  test-os:
    image: opensearchproject/opensearch:$OS_STACK_VERSION
    container_name: test-os
    restart: unless-stopped
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer
    env_file: ["./.env"]
    environment:
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms$ES_OS_JAVA_MEM -Xmx$ES_OS_JAVA_MEM"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
      - discovery.type=single-node
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
      memlock:
        soft: -1
        hard: -1
    networks:
      - arkime_es_os
    volumes:
      - os_testdata:/usr/share/opensearch/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail -u ${ES_OS_USERNAME}:${ES_OS_PASSWORD} localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 30s
      retries: 12
    profiles: ["optional"]

  arkime_es_os-main:
    image: opensearchproject/opensearch:$OS_STACK_VERSION
    container_name: arkime_es_os-main
    restart: unless-stopped
    ports:
      # NOTE: this affects containers which using host mode
      - 19200:9200 # REST API
      - 19600:9600 # Performance Analyzer
    env_file: ["./.env"]
    environment:
      - node.name=${ES_OS_MAIN_NODE} # Name the node that will run in this container
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms$ES_OS_JAVA_MEM -Xmx$ES_OS_JAVA_MEM" # Set min and max JVM heap sizes to at least 50% of system RAM
      - "DISABLE_INSTALL_DEMO_CONFIG=true" # Prevents execution of bundled demo script which installs demo certificates and security configurations to OpenSearch
      - "DISABLE_SECURITY_PLUGIN=true" # Disables Security plugin
      # - OPENSEARCH_USERNAME=${ES_OS_USERNAME}
      # - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${ES_OS_PASSWORD}

      # comment this if an OS cluster should be created
      # - discovery.type=single-node

      # uncomment this if an OS cluster should be created
      # also add other OS node containers to this compose file
      - cluster.name=${CLUSTER_NAME}  # Name the cluster
      - discovery.seed_hosts=${ES_OS_MAIN_NODE},arkime_es_os-1 # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=${ES_OS_MAIN_NODE},arkime_es_os-1 # Nodes eligibile to serve as cluster manager
    ulimits:
      nofile:
        soft: 65535 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65535
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
    networks:
      - arkime_es_os # All of the containers will join the same Docker bridge network
    volumes:
      - os01_data:/usr/share/opensearch/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail -u ${ES_OS_USERNAME}:${ES_OS_PASSWORD} localhost:${ES_OS_PORT}/_cluster/health || exit 1"]
      interval: 10s
      timeout: 30s
      retries: 12

  # uncomment to add another OS node container and create a cluster
  # additional some modifications to the "environment" section of the arkime_es_os-main container must be made
  arkime_es_os-1:
    depends_on:
      - arkime_es_os-main
    image: opensearchproject/opensearch:$OS_STACK_VERSION
    container_name: arkime_es_os-1
    restart: unless-stopped
    env_file: ["./.env"]
    environment:
      - node.name=arkime_es_os-1
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms$ES_OS_JAVA_MEM -Xmx$ES_OS_JAVA_MEM"
      - DISABLE_SECURITY_PLUGIN=true
      - DISABLE_INSTALL_DEMO_CONFIG=true
      # - OPENSEARCH_USERNAME=${ES_OS_USERNAME}
      # - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${ES_OS_PASSWORD}

      # cluster settings
      - cluster.name=${CLUSTER_NAME}
      - discovery.seed_hosts=${ES_OS_MAIN_NODE},arkime_es_os-1
      - cluster.initial_cluster_manager_nodes=${ES_OS_MAIN_NODE},arkime_es_os-1
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
      memlock:
        soft: -1
        hard: -1
    networks:
      - arkime_es_os
    volumes:
      - os02_data:/usr/share/opensearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail -u ${ES_OS_USERNAME}:${ES_OS_PASSWORD} localhost:${ES_OS_PORT}/_cluster/health || exit 1"]
      interval: 10s
      timeout: 30s
      retries: 12
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
    container_name: opensearch-dashboards
    ports:
      - 15601:5601 # Map host port 5601 to container port 5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      - 'OPENSEARCH_HOSTS=["http://arkime_es_os-main:9200","http://arkime_es_os-1:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true" # disables security dashboards plugin in OpenSearch Dashboards
    networks:
      - arkime_es_os

  arkime-setup:
    build:
      context: .
      dockerfile: ./docker/dev6.Dockerfile
      args:
        - DOCKER_UBUNTU_VERSION=${DOCKER_UBUNTU_VERSION}
        - PYTHON=${PYTHON}
    pull_policy: never
    image: zzz/arkime:${ARKIME_RELEASE_TAG}
    container_name: arkime-setup
    restart: on-failure:12
    env_file: ["./.env"]
    environment:
      - PYTHON=${PYTHON}
      - ARKIME_VERSION=${ARKIME_VERSION}
      # NOTE: Set to true on first execution, then false subsequently
      - INITIALIZE_DB=true
      - WIPE_DB=false
      - ES_OS_HOST=${ES_OS_HOST}
      - ES_OS_PORT=${ES_OS_PORT}
      - ES_OS_USERNAME=${ES_OS_USERNAME}
      - ES_OS_PASSWORD=${ES_OS_PASSWORD}
      - ARKIME_USERNAME=${ARKIME_USERNAME}
      - ARKIME_PASSWORD=${ARKIME_PASSWORD}
      - ARKIME_INSTALL_DIR=${ARKIME_INSTALL_DIR}
      - ARKIME__elasticsearch=http://${ES_OS_USERNAME}:${ES_OS_PASSWORD}@${ES_OS_HOST}:${ES_OS_PORT}
      # - ARKIME__prefix=zzz
      - CAPTURE=off
      - VIEWER=off
      - PARLIAMENT=off
      - CONT3XT=off
      - WISE=off
    depends_on:
      arkime_es_os-main:
        condition: service_healthy
    networks:
      - arkime_es_os
    volumes:
      - ./etc:/opt/arkime/etc
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  arkime-viewer:
    pull_policy: never
    image: zzz/arkime:${ARKIME_RELEASE_TAG}
    container_name: arkime-viewer
    cap_add:
      - NET_ADMIN
    restart: on-failure
    env_file: ["./.env"]
    environment:
      - PYTHON=${PYTHON}
      - ARKIME_VERSION=${ARKIME_VERSION}
      - INITIALIZE_DB=false
      - WIPE_DB=false
      - ES_OS_HOST=${ES_OS_HOST}
      - ES_OS_PORT=${ES_OS_PORT}
      - ES_OS_USERNAME=${ES_OS_USERNAME}
      - ES_OS_PASSWORD=${ES_OS_PASSWORD}
      - ARKIME_USERNAME=${ARKIME_USERNAME}
      - ARKIME_PASSWORD=${ARKIME_PASSWORD}
      - ARKIME_INSTALL_DIR=${ARKIME_INSTALL_DIR}
      - ARKIME__elasticsearch=http://${ES_OS_USERNAME}:${ES_OS_PASSWORD}@${ES_OS_HOST}:${ES_OS_PORT}
      - ARKIME__interface=${ARKIME__interface}
      - CAPTURE=off
      - VIEWER=on
      - PARLIAMENT=off
      - CONT3XT=off
      - WISE=off
    depends_on:
      arkime_es_os-main:
        condition: service_healthy
      arkime-setup:
        condition: service_completed_successfully
    ports:
      - 8005:8005
    networks:
      - arkime_es_os
    volumes:
      - ./etc/viewer.ini:/opt/arkime/etc/viewer.ini
      - ./etc/viewer.env:/opt/arkime/etc/viewer.env
      - ./logs/arkime:/etc/logrotate.d/arkime
      - ./logs:/opt/arkime/logs
      - ./raw:/opt/arkime/raw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  arkime-capture:
    pull_policy: never
    image: zzz/arkime:${ARKIME_RELEASE_TAG}
    container_name: arkime-capture
    network_mode: "host"
    cap_add:
      - NET_ADMIN
    restart: on-failure
    env_file: ["./.env"]
    environment:
      - PYTHON=${PYTHON}
      - ARKIME_HOST=${ARKIME_HOSTNAME}
      - ARKIME_VERSION=${ARKIME_VERSION}
      - INITIALIZE_DB=false
      - WIPE_DB=false
      - ES_OS_HOST=${ES_OS_HOST}
      - ES_OS_PORT=${ES_OS_PORT}
      - ES_OS_USERNAME=${ES_OS_USERNAME}
      - ES_OS_PASSWORD=${ES_OS_PASSWORD}
      - ARKIME_USERNAME=${ARKIME_USERNAME}
      - ARKIME_PASSWORD=${ARKIME_PASSWORD}
      - ARKIME_INSTALL_DIR=${ARKIME_INSTALL_DIR}
      # NOTE: These variables take precedence over configuration file settings!!!
      # NOTE: when `network_mode: "host"`, we need to use the host: `localhost:19200`
      - ARKIME__elasticsearch=http://${ES_OS_USERNAME}:${ES_OS_PASSWORD}@localhost:19200
      - ARKIME__interface=${ARKIME__interface}
      - CAPTURE=on
      - VIEWER=off
      - PARLIAMENT=off
      - CONT3XT=off
      - WISE=off
    # NOTE: needed by `tpacketv3BlockSize`
    ulimits:
      memlock:
        soft: -1
        hard: -1
    depends_on:
      arkime_es_os-main:
        condition: service_healthy
      arkime-viewer:
        condition: service_started
      arkime-setup:
        condition: service_completed_successfully
    volumes:
      - ./parsers/example.py:/opt/arkime/parsers/example.py
      - ./etc/config.ini:/opt/arkime/etc/config.ini
      - ./etc/capture.env:/opt/arkime/etc/capture.env
      - ./logs/arkime:/etc/logrotate.d/arkime
      - ./logs:/opt/arkime/logs
      - ./raw:/opt/arkime/raw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  arkime-parliament:
    pull_policy: never
    image: zzz/arkime:${ARKIME_RELEASE_TAG}
    container_name: arkime-parliament
    cap_add:
      - NET_ADMIN
    restart: on-failure
    env_file: ["./.env"]
    environment:
      - PYTHON=${PYTHON}
      - ARKIME_VERSION=${ARKIME_VERSION}
      - INITIALIZE_DB=false
      - WIPE_DB=false
      - ES_OS_HOST=${ES_OS_HOST}
      - ES_OS_PORT=${ES_OS_PORT}
      - ES_OS_USERNAME=${ES_OS_USERNAME}
      - ES_OS_PASSWORD=${ES_OS_PASSWORD}
      - ARKIME_USERNAME=${ARKIME_USERNAME}
      - ARKIME_PASSWORD=${ARKIME_PASSWORD}
      - ARKIME_INSTALL_DIR=${ARKIME_INSTALL_DIR}
      - ARKIME__elasticsearch=http://${ES_OS_USERNAME}:${ES_OS_PASSWORD}@${ES_OS_HOST}:${ES_OS_PORT}
      - ARKIME__interface=${ARKIME__interface}
      - CAPTURE=off
      - VIEWER=off
      - PARLIAMENT=on
      - CONT3XT=off
      - WISE=off
    depends_on:
      arkime_es_os-main:
        condition: service_healthy
      arkime-viewer:
        condition: service_started
      arkime-setup:
        condition: service_completed_successfully
    ports:
      - 8008:8008
    networks:
      - arkime_es_os
    volumes:
      - ./etc/parliament.ini:/opt/arkime/etc/parliament.ini
      - ./etc/parliament.env:/opt/arkime/etc/parliament.env
      - ./logs/arkime:/etc/logrotate.d/arkime
      - ./logs:/opt/arkime/logs
      - ./raw:/opt/arkime/raw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  arkime-wise:
    pull_policy: never
    image: zzz/arkime:${ARKIME_RELEASE_TAG}
    container_name: arkime-wise
    cap_add:
      - NET_ADMIN
    restart: on-failure
    env_file: ["./.env"]
    environment:
      - PYTHON=${PYTHON}
      - ARKIME_VERSION=${ARKIME_VERSION}
      - INITIALIZE_DB=false
      - WIPE_DB=false
      - ES_OS_HOST=${ES_OS_HOST}
      - ES_OS_PORT=${ES_OS_PORT}
      - ES_OS_USERNAME=${ES_OS_USERNAME}
      - ES_OS_PASSWORD=${ES_OS_PASSWORD}
      - ARKIME_USERNAME=${ARKIME_USERNAME}
      - ARKIME_PASSWORD=${ARKIME_PASSWORD}
      - ARKIME_INSTALL_DIR=${ARKIME_INSTALL_DIR}
      - ARKIME__elasticsearch=http://${ES_OS_USERNAME}:${ES_OS_PASSWORD}@${ES_OS_HOST}:${ES_OS_PORT}
      - ARKIME__interface=${ARKIME__interface}
      - CAPTURE=off
      - VIEWER=off
      - PARLIAMENT=off
      - CONT3XT=off
      - WISE=on
    depends_on:
      arkime_es_os-main:
        condition: service_healthy
      arkime-viewer:
        condition: service_started
      arkime-setup:
        condition: service_completed_successfully
    ports:
      - 8081:8081
    networks:
      - arkime_es_os
    volumes:
      - ./etc/wise.ini:/opt/arkime/etc/wise.ini
      - ./etc/wise.env:/opt/arkime/etc/wise.env
      - ./logs/arkime:/etc/logrotate.d/arkime
      - ./logs:/opt/arkime/logs
      - ./raw:/opt/arkime/raw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  arkime-cont3xt:
    pull_policy: never
    image: zzz/arkime:${ARKIME_RELEASE_TAG}
    container_name: arkime-cont3xt
    cap_add:
      - NET_ADMIN
    restart: on-failure
    env_file: ["./.env"]
    environment:
      - PYTHON=${PYTHON}
      - ARKIME_VERSION=${ARKIME_VERSION}
      - INITIALIZE_DB=false
      - WIPE_DB=false
      - ES_OS_HOST=${ES_OS_HOST}
      - ES_OS_PORT=${ES_OS_PORT}
      - ES_OS_USERNAME=${ES_OS_USERNAME}
      - ES_OS_PASSWORD=${ES_OS_PASSWORD}
      - ARKIME_USERNAME=${ARKIME_USERNAME}
      - ARKIME_PASSWORD=${ARKIME_PASSWORD}
      - ARKIME_INSTALL_DIR=${ARKIME_INSTALL_DIR}
      - ARKIME__elasticsearch=http://${ES_OS_USERNAME}:${ES_OS_PASSWORD}@${ES_OS_HOST}:${ES_OS_PORT}
      - ARKIME__interface=${ARKIME__interface}
      - CAPTURE=off
      - VIEWER=off
      - PARLIAMENT=off
      - CONT3XT=on
      - WISE=off
    depends_on:
      arkime_es_os-main:
        condition: service_healthy
      arkime-viewer:
        condition: service_started
      arkime-setup:
        condition: service_completed_successfully
    ports:
      - 3218:3218
    networks:
      - arkime_es_os
    volumes:
      - ./etc/cont3xt.ini:/opt/arkime/etc/cont3xt.ini
      - ./etc/cont3xt.env:/opt/arkime/etc/cont3xt.env
      - ./logs/arkime:/etc/logrotate.d/arkime
      - ./logs:/opt/arkime/logs
      - ./raw:/opt/arkime/raw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  arkime-docs:
    build:
      context: ./docs
      dockerfile: ../docker/docs.Dockerfile
    pull_policy: never
    image: zzz/arkime-docs:${ARKIME_RELEASE_TAG}
    container_name: arkime-docs
    restart: on-failure:12
    ports:
      - 4000:80
    volumes:
      - ./docker/nginx/arkime.conf:/etc/nginx/conf.d/default.conf
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    profiles: ["optional"]

volumes:
  certs:
    driver: local
  os_testdata:
  os01_data:
    driver: local
    driver_opts:
      type: none
      device: ./db/main/os
      o: bind
  # add a volume foreach OS node container
  os02_data:
    driver: local
    driver_opts:
      type: none
      device: ./db/node-1/os
      o: bind

networks:
  arkime_es_os:
    driver: bridge
    name: arkime_es_os
